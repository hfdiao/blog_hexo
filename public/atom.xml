<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[随想录]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://viminfo.com//"/>
  <updated>2014-05-21T04:36:46.298Z</updated>
  <id>http://viminfo.com//</id>
  
  <author>
    <name><![CDATA[dhf]]></name>
    <email><![CDATA[hfdiao@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Nginx配置使用过期缓存]]></title>
    <link href="http://viminfo.com/2014/04/15/nginx-use-stale-cache/"/>
    <id>http://viminfo.com/2014/04/15/nginx-use-stale-cache/</id>
    <published>2014-04-14T17:28:46.000Z</published>
    <updated>2014-05-15T09:48:04.000Z</updated>
    <content type="html"><![CDATA[<p>今天下午一朋友在群里问起  </p>
<pre><code>nginx有什么module可以达到这个效果：
<span class="bullet">1. </span>对指定uri做缓存，可配置有效时间
<span class="bullet">2. </span>失效时会继续返回当前缓存的页面，但会起个线程去读新的内容；并更新已缓存内容
<span class="bullet">3. </span>当2发生时，如果请求到的内容非200返回码，不更新缓存，继续等一个超时再去取
</code></pre><p>另一朋友提议说还是自己写一个吧，第三条需求应该没有能满足的。但一看这问题，全都是很通用的使用场景啊，nginx肯定有现成的模块了吧。翻查了下 <a href="http://nginx.org/cn/docs/http/ngx_http_proxy_module.html" target="_blank">ngx_http_proxy_module</a> 的文档，找到  </p>
<pre><code>语法: proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_404 | off <span class="keyword">...</span>;  
默认值: proxy_cache_use_stale off;
</code></pre><p>看这描述完全符合这朋友的需求嘛，为何他却没发现呢？打探了一下才发现，原来他们误以为<code>proxy_cache_use_stale</code>只能设置一个值，文档上多个值之间是用‘|’隔开的，而且该指令的默认值是说明上只显示了一个<code>off</code>，让他们误解成这指令只能设置一个值了。  </p>
<p>其实该指令说明上还有一句，<code>这条指令的参数与proxy_next_upstream指令的参数相同</code>，如果认真去查看指令<code>proxy_next_upstream</code>的说明也应该能发现是支持多个值的。不过这文档确实也还可以写得更清晰详细一些，避免粗心的人误解。  </p>
<p>另外就是，千万不要总想着自己遇到的问题是特殊的，自己能遇到的问题绝大多数情况下都已经有前人解决过了，多查文档多用搜索，绝对比自己又重新发明一次轮子省时省事而且安全可靠多了。</p>
]]></content>
    
    
      <category term="nginx" scheme="http://viminfo.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建Redis存储集群]]></title>
    <link href="http://viminfo.com/2014/03/28/redis-storage-cluster/"/>
    <id>http://viminfo.com/2014/03/28/redis-storage-cluster/</id>
    <published>2014-03-28T15:18:55.000Z</published>
    <updated>2014-05-15T09:48:20.000Z</updated>
    <content type="html"><![CDATA[<p>以前都是将redis当做纯粹的cache server使用，关掉snapshot和aof，也不需要slave。其中任何一台挂掉也无所谓，反正可以从db中再加载回来。  </p>
<p>有个项目DBA抱怨了很久，每天频繁往db插入太多数据，而这些数据90%以上都是只需要存储几天就过期，哪怕丢失部分数据也是可以接受的。综合这些条件，这些会过期的数据用redis来做临时存储应该是比较适合的。打开redis的aof，能够尽量保证数据持久存储下来。安全起见，给master配2个slave，再起3个 <a href="http://redis.io/topics/sentinel" target="_blank">sentinel</a> 做服务监控和故障转移，这样发生故障也尽量不需要人工介入。  </p>
<p>需要注意的是，redis是单进程的，而且slave初次和master同步时，会强制master做一次snapshot。为了充分利用机器cpu资源并减少snapshot的开销，应该在一台机器上起多个redis实例，每个redis实例占用内存不应太大。为了充分利用内存，修改 <code>/etc/sysctl.conf</code>，增加配置项 <a href="http://redis.io/topics/faq" target="_blank"><code>vm.overcommit_memory=1</code></a>。</p>
<p>redis 2.8之前，replication不支持 <a href="http://redis.io/topics/replication" target="_blank">Partial resynchronization</a>，网络瞬断会导致强制重新同步，造成不必要的开销，影响服务稳定性。故请务必使用redis 2.8以上版本。  </p>
<p>需要注意的是，sentinel严重依赖系统时间，一旦系统时间被非预期的方式修改，或者系统非常繁忙，又或者进程因为某些原因而被阻塞时，sentinel可能会工作不正常。sentinel检测到系统不正常后，将切换到 <a href="http://redis.io/topics/sentinel" target="_blank">TILT</a> 模式，只监控而不做其他操作（故障转移等）。</p>
<p>Master参考配置:  </p>
<pre><code><span class="preprocessor"># ${port} 表示实际的端口号</span>
<span class="preprocessor"># 复制N份redis.conf到/etc/redis/redis_${port}.conf</span>
<span class="preprocessor"># 注意：不能共用同一份配置文件，会被redis sentinel重写</span>
<span class="preprocessor"># 需要修改的配置如下（除提到的修改项外其余保持默认配置不变）：</span>

port ${port}

<span class="preprocessor"># /var/run/redis/${port}/ 目录必须已经存在</span>
dir /<span class="keyword">var</span>/run/redis/${port}/

pidfile redis.pid
logfile redis.log

<span class="preprocessor"># 开启aof文件记录，启动后再手工关闭aof</span>
appendonly yes
appendfilename redis.aof

<span class="preprocessor"># 虽然关掉了snapshot，但是slave初次同步时会强制master snapshot</span>
<span class="preprocessor"># 请留够内存用于fork snapshot，建议留40%机器内存</span>
<span class="preprocessor"># 避免多个slave同时SYNC</span>
dbfilename redis.rdb

<span class="preprocessor"># 关闭rdb snapshot</span>
<span class="preprocessor"># save 900 1</span>
<span class="preprocessor"># save 300 10</span>
<span class="preprocessor"># save 60 10000</span>

<span class="preprocessor"># 后台运行</span>
daemonize yes

<span class="preprocessor"># 每个redis 4gb</span>
maxmemory <span class="number">4294967296</span>
maxmemory-policy volatile-ttl
</code></pre><p>Master启动命令:  </p>
<pre><code>./redis-server /etc/redis/redis_<span class="variable">${port}</span>.conf
<span class="comment"># 若是故障后重启，不需要关闭aof，而是在同步完成后关闭新master的aof</span>
./redis-cli -p <span class="variable">${port}</span> config <span class="keyword">set</span> appendonly no
</code></pre><p>Slave参考配置: </p>
<pre><code><span class="comment"># 略，基本同Master配置，只在最后加多一行</span>
slaveof <span class="variable">$master_ip</span> <span class="variable">$master_port</span>  
</code></pre><p>Slave启动命令:  </p>
<pre><code>./redis-server /etc/redis/redis_<span class="variable">${port}</span>.conf
</code></pre><p>Sentinel参考配置:  </p>
<pre><code># <span class="char">${</span>port} 表示实际的端口号
port <span class="char">${</span>port}
# /var/run/redis/<span class="char">${</span>port}/ 目录必须已经存在
dir /var/run/redis/<span class="char">${</span>port}/

pidfile redis.pid
logfile redis.log

# 后台运行
daemonize yes

<span class="symbol">#start</span> config for <span class="char">${</span>master1_name}
sentinel monitor <span class="char">${</span>master1_name} <span class="char">${</span>master1_ip} <span class="char">${</span>master1_port} <span class="number">2</span>
sentinel down-after-milliseconds <span class="char">${</span>master1_name} <span class="number">5000</span>
sentinel failover-timeout <span class="char">${</span>master1_name} <span class="number">900000</span>
sentinel parallel-syncs <span class="char">${</span>master1_name} <span class="number">1</span>

# 触发报警脚本，<span class="char">${</span>monitor1_path}是报警脚本的路径
# 调用脚本时传递两个参数：<span class="char">${</span>event_type}, <span class="char">${</span>event_description}
<span class="symbol">#sentinel</span> notification-script <span class="char">${</span>master1_name} <span class="char">${</span>monitor1_path}
<span class="symbol">#end</span> config for <span class="char">${</span>master1_name}

# 剩余master的配置参考master1的配置项进行补充
</code></pre><p>Sentinel启动命令:  </p>
<pre><code>./redis-server /etc/redis/sentinel_<span class="variable">${port}</span>.conf --sentinel
</code></pre>]]></content>
    
    
      <category term="redis" scheme="http://viminfo.com/tags/redis/"/>
    
      <category term="cluster" scheme="http://viminfo.com/tags/cluster/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Ivy中引用Maven管理依赖的lib]]></title>
    <link href="http://viminfo.com/2014/03/27/ivy-dependents-on-maven-repo/"/>
    <id>http://viminfo.com/2014/03/27/ivy-dependents-on-maven-repo/</id>
    <published>2014-03-27T12:20:37.000Z</published>
    <updated>2014-05-21T04:35:13.000Z</updated>
    <content type="html"><![CDATA[<p>若只需要该lib本身而不引入该lib的任何依赖, 在dependency的属性中设置  </p>
<pre><code><span class="setting">transitive=<span class="value"><span class="string">"false"</span>  </span></span>
</code></pre><p>若需要该lib和该lib所必须的依赖关系而不引入optional的依赖, 在dependency的属性中设置  </p>
<pre><code>conf=<span class="string">"<span class="variable">${yourconf}</span>-&gt;default"</span>  
</code></pre><p>Maven中的scope都被Ivy转换成对应的conf，可以对应着修改设置。  </p>
<p>参考资料:<br><a href="https://ant.apache.org/ivy/history/latest-milestone/ivyfile/dependency.html" target="_blank">https://ant.apache.org/ivy/history/latest-milestone/ivyfile/dependency.html</a><br><a href="https://www.symphonious.net/2010/01/25/using-ivy-for-dependency-management/" target="_blank">https://www.symphonious.net/2010/01/25/using-ivy-for-dependency-management/</a>  </p>
]]></content>
    
    
      <category term="ivy" scheme="http://viminfo.com/tags/ivy/"/>
    
      <category term="maven" scheme="http://viminfo.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mou总在最前窗口]]></title>
    <link href="http://viminfo.com/2014/03/21/mou-always-front/"/>
    <id>http://viminfo.com/2014/03/21/mou-always-front/</id>
    <published>2014-03-21T15:53:43.000Z</published>
    <updated>2014-05-15T09:27:04.000Z</updated>
    <content type="html"><![CDATA[<p>最近发现打开Mou后一直占据着最前窗口，点击其他程序都无法切换窗口，而将Mou最小化后就再也无法切换回Mou了。  </p>
<p>为这个问题烦恼几天后终于受不了，Google “Mou 总在最前”后找到<a href="http://www.v2ex.com/t/97996" target="_blank">V2EX</a>上的一篇文章，看症状与我的几乎一模一样。遂试之，症状消失，感谢楼主！  </p>
<p>解决方法如下:</p>
<pre><code>View-&gt;<span class="keyword">Toggle</span> Floating
</code></pre><p>看来是不小心在用Mou编辑文档时，按下了其他程序的快捷键 - -#</p>
]]></content>
    
    
      <category term="mou" scheme="http://viminfo.com/tags/mou/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java RPC工具eurpc 0.2.0更新日志]]></title>
    <link href="http://viminfo.com/2012/12/22/java-eurpc/"/>
    <id>http://viminfo.com/2012/12/22/java-eurpc/</id>
    <published>2012-12-22T12:24:21.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>将I/O逻辑从RpcClient中抽取出来到RpcConnection中，得益于此，使得同一个client多次方法调用间可以使用不同的connection（连接池实现起来就更自然了）</li>
<li>一些类名称做了修改，含义更清晰。SimpleSerializer重命名为JDKObjectSerializer，SimpleRpcServer重命名为BIORpcServer</li>
<li>JDKObjectSerializer的网络传输方式也增加了length field header，终于和其他Serializer的格式一致（NettyRpcServer/NettyRpcConnection也可以使用JDKObjectSerializer了）</li>
<li>增加了Logger接口定义以及一些常用日志组件的LoggerAdapter，并且提供了日志组件自动检测机制（LoggerHolder类，检测顺序：slf4j—&gt;commons-logging—&gt;log4j—&gt;java.util.Logger）</li>
</ol>
]]></content>
    
    
      <category term="eurpc" scheme="http://viminfo.com/tags/eurpc/"/>
    
      <category term="java" scheme="http://viminfo.com/tags/java/"/>
    
      <category term="rpc" scheme="http://viminfo.com/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS条件编译]]></title>
    <link href="http://viminfo.com/2012/05/05/js_conditional_compilation/"/>
    <id>http://viminfo.com/2012/05/05/js_conditional_compilation/</id>
    <published>2012-05-05T10:08:33.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>最近给公司开发新邮件提醒的浏览器扩展时，需要分别开发搜狗和Chrome版本，而这两个版本绝大部分代码都是相同的，只有少数代码的区别。如果因为这么几行代码的不同而需要分拆到多个js文件中就会存在重复代码，后续有修改时就需要修改多处，维护起来不太方便。</p>
<p>在C语言里，可以根据不同的平台编译出不同的二进制代码，那么是否也可以对JS做这样的处理呢？答案是肯定的，google后发现有两个项目可以处理这个事情，一个是<a href="http://code.google.com/p/js-build-tools/" title="js_build_tools" target="_blank">js_build_tools</a>，另一个是<a href="https://github.com/bramstein/js-preprocess" title="js-preprocess" target="_blank">js-prepross</a>。试用js_build_tools时发现这个东西只能对单个文件进行处理，不支持fileset，且输入文件不能和输出文件同名，使用起来不太方便。而js-preprocess支持fileset，输入文件可以和输出文件同名。相比js_build_tools，js-preprocess使用较为方便，但也存在一些不足。js-preprocess只支持相对于项目的相对路径，ant的taskname只能命名为preprocess。js_build_tools里的编译指令相比C的编译指令多了注释符号//，对js IDE相对友好。</p>
<p>花了一点时间对js-preprocess做了一些修改，fork的项目地址-&gt;<a href="https://github.com/hfdiao/js-preprocess" title="传送门" target="_blank">传送门</a>。fork后支持绝对路径，ant的taskname没有限制，编译指令也改成js_build_tools的方式。</p>
]]></content>
    
    
      <category term="javascript" scheme="http://viminfo.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[setSoTimeout does not work with nio SocketChannel]]></title>
    <link href="http://viminfo.com/2011/12/20/setsotimeout-does-not-work-with-nio-socketchannel/"/>
    <id>http://viminfo.com/2011/12/20/setsotimeout-does-not-work-with-nio-socketchannel/</id>
    <published>2011-12-20T09:39:07.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>通过SocketChannel.socket().setSoTimeout(timeout)设置读超时，对于SocketChannel.read(buffer)操作来说是不会有任何效果的，如果SocketChannel设置了blocking mode的话会一致阻塞直到有可读取的内容或EOF。  </p>
<p>有人就此给Sun提了个bug（<a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4614802），" target="_blank">http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4614802），</a> 但Sun不认为这是个bug：  </p>
<pre>
Not a bug.  The read methods in SocketChannel (and DatagramChannel) do not
support timeouts.  If you need the timeout functionality then use the read
methods of the associated Socket (or DatagramSocket) object.
</pre>

<p>既然Sun不认为这是个bug只能自己使用的时候注意了（有人说起码是个Javadoc的bug， absolutely！）  </p>
]]></content>
    
    
      <category term="java" scheme="http://viminfo.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[网易新邮件提醒Chrome扩展开发]]></title>
    <link href="http://viminfo.com/2011/11/20/nmpush-chrome/"/>
    <id>http://viminfo.com/2011/11/20/nmpush-chrome/</id>
    <published>2011-11-19T17:26:19.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>最近突然对chrome扩展开发来了兴趣，刚好最近了解了下网易邮箱助手获取新邮件到达的方法就想着自己动手写一个新邮件到达提醒的chrome扩展（其实挺蛋疼的，网易邮箱网页版本身就提供了提醒功能）。协议可以通过抓包来了解，也比较简单易懂。</p>
<p>周六睡醒就花了几个小时一边看chrome扩展的<a href="http://open.chrome.360.cn/html/dev_manifest.html" target="_blank">开发文档</a>一边码代码，花了几个小时就把第一版弄出来了，chrome的扩展开发还是挺方便的。</p>
<p>一般来说，extensions都会有一个背景页面（background_page）用于主流程处理，逻辑代码通常都在这里。除了流程处理外一般还会有extension的设置需要处理，那么一般也会提供一个选项页面（options_page）。extension各个页面之间可以通过chrome.extension的api来进行通讯，比如可以通过chrome.extension.getBackgroudPage()获得背景页面的DOM树。API都相对比较简单，用的时候翻翻手册就很容易明白了（PS：360翻译的质量真不敢恭维）。</p>
<p>项目代码托管在google code上，有兴趣的可以自行<a href="http://code.google.com/p/nmpush/" target="_blank">查看</a>。</p>
<p>TODO：<br><del> 1. 目前版本账号密码都是明文保存的，可以改成md5处理。</del><br><del> 2. 点击进入邮箱查看邮件。</del><br><del> 3. 5秒后自动关闭弹窗。</del><br><del> 4. 自动更新。</del><br>5. 多账号支持。<br>6. 异常情况处理。</p>
]]></content>
    
    
      <category term="chrome" scheme="http://viminfo.com/tags/chrome/"/>
    
      <category term="pushmail" scheme="http://viminfo.com/tags/pushmail/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[RT] Using stunnel to telnet into GMail IMAP]]></title>
    <link href="http://viminfo.com/2011/10/17/using-stunnel-to-telnet-into-gmail-imap/"/>
    <id>http://viminfo.com/2011/10/17/using-stunnel-to-telnet-into-gmail-imap/</id>
    <published>2011-10-17T13:58:03.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>PS: <a href="http://wiredbytes.com/node/8" target="_blank">原文</a>被墙， 转来方便墙内翻阅。 最近在搞IMAP相关的东西， 一直头疼不知道怎么命令行下测gmail的一些行为， 这篇文章真是帮大忙了。  </p>
<pre>
By edwin - Posted on 12 February 2009

Here is a case study of how stunnel can be used to test an SSL based protocol. We will create an stunnel configuration that reroutes the IMAP port (TCP 143) to the Secure IMAP port (TCP 993) on GMail's IMAP server (imap.gmail.com). We will than test the setup by using telnet.

I will be using Ubuntu 8.10 (Intrepid Ibex).

First, let's install stunnel.

sudo apt-get install stunnel

Edit /etc/default/stunnel4, change ENABLED=0 to ENABLED=1

Edit /etc/stunnel/stunnel.conf as shown in the example below:

; Sample stunnel configuration file by Michal Trojnara 2002-2006
; Some options used here may not be adequate for your particular configuration
; Please make sure you understand them (especially the effect of chroot jail)

; Certificate/key is needed in server mode and optional in client mode
;cert = /etc/stunnel/mail.pem
;key = /etc/stunnel/mail.pem

; Protocol version (all, SSLv2, SSLv3, TLSv1)
sslVersion = SSLv3

; Some security enhancements for UNIX systems - comment them out on Win32
chroot = /var/lib/stunnel4/
setuid = stunnel4
setgid = stunnel4
; PID is created inside chroot jail
pid = /stunnel4.pid

; Some performance tunings
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
;compression = rle

; Workaround for Eudora bug
;options = DONT_INSERT_EMPTY_FRAGMENTS

; Authentication stuff
;verify = 2
; Don't forget to c_rehash CApath
; CApath is located inside chroot jail
;CApath = /certs
; It's often easier to use CAfile
;CAfile = /etc/stunnel/certs.pem
; Don't forget to c_rehash CRLpath
; CRLpath is located inside chroot jail
;CRLpath = /crls
; Alternatively you can use CRLfile
;CRLfile = /etc/stunnel/crls.pem

; Some debugging stuff useful for troubleshooting
debug = 7
output = /var/log/stunnel4/stunnel.log

; Use it for client mode
client = yes

; Service-level configuration

;[pop3s]
;accept = 995
;connect = 110

[imaps]
accept = 143
connect = imap.gmail.com:993

;[ssmtp]
;accept = 465
;connect = 25

;[https]
;accept = 443
;connect = 80
;TIMEOUTclose = 0

; vim:ft=dosini

Start up Stunnel

sudo /etc/init.d/stunnel4 start

Verify that the IMAP is listening on the local server.

netstat -an | grep -iw LISTEN
tcp 0 0 0.0.0.0:143 0.0.0.0:* LISTEN

The following requires that your GMail account have IMAP enabled. This is not enabled by default. Replace username@gmail.com with your real email address. Replace password with your real password.

telnet localhost 143
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
* OK Gimap ready for requests from 71.65.199.7 c5if2789008nfi.67
)
01 LOGIN username@gmail.com password
01 OK username@gmail.com authenticated (Success)
02 LOGOUT
* BYE LOGOUT Requested
02 OK 73 good day (Success)
Connection closed by foreign host.

That's it. If you're feeling adventourous you can use Hydra to brute force an account you own.

./hydra -l yourfriend@gmail.com -P password.txt -V localhost imap
</pre>
]]></content>
    
    
      <category term="ssl" scheme="http://viminfo.com/tags/ssl/"/>
    
      <category term="stunnel" scheme="http://viminfo.com/tags/stunnel/"/>
    
      <category term="telnet" scheme="http://viminfo.com/tags/telnet/"/>
    
      <category term="imap" scheme="http://viminfo.com/tags/imap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何抓包iPad的 http/https 请求]]></title>
    <link href="http://viminfo.com/2011/05/15/ipad_http_sniffer/"/>
    <id>http://viminfo.com/2011/05/15/ipad_http_sniffer/</id>
    <published>2011-05-14T21:13:47.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>ipad上目前没发现有抓包的工具， 就算有也应该不会好用到哪里去， 但要对ipad的http或https请求进行抓包该怎么办呢？方法还是有的， 前提是有两块能上网的网卡（至少有一块无线网卡，主要是当无线路由用，本身有无线路由的就忽略connectify这一步吧）以及一个Windows操作系统（都怪Fiddler2只有windows版本）。  </p>
<p>首先， 通过Ad-hoc open（Access Point等其他方式也可以， 我懒得输密码就设成Ad-hoc open了）将无线网卡共享出去（可以通过<a href="http://www.connectify.me/" target="_blank">Connectify</a>傻瓜化地设置， 不过dhcp似乎经常出问题啊）  </p>
<p><img src="/images/1a58992e494361019203c5b922f11f41955fd9ed.png" alt="">  </p>
<p>然后， 开启<a href="http://www.fiddler2.com/fiddler2/" target="_blank">Fiddler2</a> （一个强大的http抓包工具）， 如果需要抓取https的话需要在Tools-&gt;Fiddler Options-&gt;HTTPS里勾选上Decrypt https traffic  </p>
<p><img src="/images/67db5ae9703a0251529fbb5a4ebb8513256135ca.png" alt="">  </p>
<p>接着需要设置Fiddler2的代理服务，如果不希望抓取非ipad的http请求请不要勾选WinINET Connections的相关选项  </p>
<p><img src="/images/9f8dc44a87b5d511dea71cd72adfac7627b289fe.png" alt="">  </p>
<p>最后就是设置ipad的wifi了， wifi通过刚刚共享的无线进行上网并将HTTP代理设置为手动， 服务器地址填上192.168.2.1，端口填上8888（就是Fiddler2-&gt;Tools-&gt;Fiddler Options中填写的Fiddler listens on port），这样ipad上的所有http/https请求都能在Fiddler2上看到了。  </p>
<p>PS： Fiddler2抓https请求是通过伪造证书来实现的，需要信任这个伪造的证书。  </p>
]]></content>
    
    
      <category term="http" scheme="http://viminfo.com/tags/http/"/>
    
      <category term="sniffer" scheme="http://viminfo.com/tags/sniffer/"/>
    
      <category term="ipad" scheme="http://viminfo.com/tags/ipad/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何修改deb安装包里的依赖关系/冲突]]></title>
    <link href="http://viminfo.com/2011/03/12/deb_dependence_modify/"/>
    <id>http://viminfo.com/2011/03/12/deb_dependence_modify/</id>
    <published>2011-03-12T12:15:18.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>今天装code::blocks时， 总是提示  </p>
<pre>
错误： 破坏已有软件包 'codeblocks-common' 对 codeblocks (< 10.05-1) 的冲突关系
</pre>

<p>直接打开deb包修改里面的control文件也没用，关闭后又恢复原样了。在 <a href="http://ubuntuforums.org/showthread.php?t=636724" target="_blank">ubuntuforms</a> 搜到一段shell脚本倒是可以修改control文件后重新生成一个deb包， 脚本如下：</p>
<pre><code><span class="shebang">#!/bin/bash
</span>
<span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$1</span>"</span> ]]; <span class="keyword">then</span>
    <span class="built_in">echo</span> <span class="string">"Syntax: <span class="variable">$0</span> debfile"</span>
    <span class="keyword">exit</span> <span class="number">1</span>
<span class="keyword">fi</span>
DEBFILE=<span class="string">"<span class="variable">$1</span>"</span>
TMPDIR=mktemp <span class="operator">-d</span> /tmp/deb.XXXXXXXXXX || <span class="keyword">exit</span> <span class="number">1</span>
OUTPUT=basename <span class="string">"<span class="variable">$DEBFILE</span>"</span> .deb.modfied.deb
<span class="keyword">if</span> [[ <span class="operator">-e</span> <span class="string">"<span class="variable">$OUTPUT</span>"</span> ]]; <span class="keyword">then</span>
    <span class="built_in">echo</span> <span class="string">"<span class="variable">$OUTPUT</span> exists."</span>
    rm -r <span class="string">"<span class="variable">$TMPDIR</span>"</span>
    <span class="keyword">exit</span> <span class="number">1</span>
<span class="keyword">fi</span>
dpkg-deb -x <span class="string">"<span class="variable">$DEBFILE</span>"</span> <span class="string">"<span class="variable">$TMPDIR</span>"</span>
dpkg-deb --control <span class="string">"<span class="variable">$DEBFILE</span>"</span> <span class="string">"<span class="variable">$TMPDIR</span>"</span>/DEBIAN
<span class="keyword">if</span> [[ ! <span class="operator">-e</span> <span class="string">"<span class="variable">$TMPDIR</span>"</span>/DEBIAN/control ]]; <span class="keyword">then</span>
    <span class="built_in">echo</span> DEBIAN/control not found.
    rm -r <span class="string">"<span class="variable">$TMPDIR</span>"</span>
    <span class="keyword">exit</span> <span class="number">1</span>
<span class="keyword">fi</span>
CONTROL=<span class="string">"<span class="variable">$TMPDIR</span>"</span>/DEBIAN/control
MOD=stat -c <span class="string">"%y"</span> <span class="string">"<span class="variable">$CONTROL</span>"</span>
vi <span class="string">"<span class="variable">$CONTROL</span>"</span>
<span class="keyword">if</span> [[ <span class="string">"<span class="variable">$MOD</span>"</span> == stat -c <span class="string">"%y"</span> <span class="string">"<span class="variable">$CONTROL</span>"</span> ]]; <span class="keyword">then</span>
    <span class="built_in">echo</span> Not modfied.
<span class="keyword">else</span>
    <span class="built_in">echo</span> Building new deb...
    dpkg -b <span class="string">"<span class="variable">$TMPDIR</span>"</span> <span class="string">"<span class="variable">$OUTPUT</span>"</span>
<span class="keyword">fi</span>
rm -r <span class="string">"<span class="variable">$TMPDIR</span>"</span>
</code></pre>]]></content>
    
    
      <category term="deb" scheme="http://viminfo.com/tags/deb/"/>
    
      <category term="dependence" scheme="http://viminfo.com/tags/dependence/"/>
    
      <category term="linux" scheme="http://viminfo.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu下安装TP Link TL-WN821N 无线网卡驱动]]></title>
    <link href="http://viminfo.com/2011/01/19/ubuntu_tp-link_tl-wn821n/"/>
    <id>http://viminfo.com/2011/01/19/ubuntu_tp-link_tl-wn821n/</id>
    <published>2011-01-19T06:05:07.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>前几天笔记本自带的无线网卡似乎坏了，系统没有识别这个设备，就买了TP Link的USB无线网卡TL-WN821N。插上后发现Ubuntu根本没有识别这个设备，还是无法上网。  </p>
<p>郁闷之下，切回windows（TP Link随机光盘带有windows的驱动），上网搜索后发现有<a href="http://madwifi-project.org/" target="_blank">madwifi</a>这个开源项目，但是该项目目前还不支持usb接口的网卡（其他两个版本ath5k/ath9k的设备支持列表也没找到TL-WN821N）。后来发现有人提到用ndiswrapper可以安装windows下的驱动文件，并且用IOGEAR GWU623.zip里面的驱动文件可以正常安装使用。但我这台机安装ndiswrapper后再装上GWU623的驱动，却还是无法上网！删掉这个驱动后用TL-WN821N自带光盘里的驱动文件，能正常上网了，oh yeah</p>
]]></content>
    
    
      <category term="tl-wn821n" scheme="http://viminfo.com/tags/tl-wn821n/"/>
    
      <category term="ubuntu" scheme="http://viminfo.com/tags/ubuntu/"/>
    
      <category term="无线网卡" scheme="http://viminfo.com/tags/%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[桌游马尼拉规则调整乱想]]></title>
    <link href="http://viminfo.com/2010/08/26/boardgame_manila_rule_extension/"/>
    <id>http://viminfo.com/2010/08/26/boardgame_manila_rule_extension/</id>
    <published>2010-08-26T15:19:17.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>今天跟着同事试着学了一把马尼拉，游戏还不错，不过5个人玩时间倒是长了些，花了快2个小时。</p>
<p>前3回合凭着做海贼的天赋，暴发了一把，后面主要就是靠股票和上船运货稳扎稳打了，最后居然大胜。</p>
<p>今天这局买港口话事权的价格普遍偏高，有一局我居然花了31块大洋买话事权，大家都太冲动了些，都是冲着股票去的。这里的股票只有升值（或者保值），如果改成和现实一样，既有可能涨也有可能跌的话游戏会不会更刺激呢？而且再加上一支海盗的股票，可选择的就更多了。刚开局的时候所有股票价格都为30，货物运送成功1次则股票价格涨1格，最多连涨3格（3次后就算继续运送成功也不涨）；货物运送失败1次则股票价格跌1格，同样，最多连跌3格；而海盗每成功劫1条船股票价格涨1格，1回合内没有劫到船则股票价格跌1格，连涨连跌次数同样是3格。这样调整之后，投资股票时则需要更谨慎，购买话事权的时候也或许会更冷静一些。</p>
]]></content>
    
    
      <category term="桌游" scheme="http://viminfo.com/tags/%E6%A1%8C%E6%B8%B8/"/>
    
      <category term="马尼拉" scheme="http://viminfo.com/tags/%E9%A9%AC%E5%B0%BC%E6%8B%89/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql字符默认不区分大小写？]]></title>
    <link href="http://viminfo.com/2010/08/19/mysql_case_insensitive/"/>
    <id>http://viminfo.com/2010/08/19/mysql_case_insensitive/</id>
    <published>2010-08-19T03:53:25.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>最近发现短链接服务在生成短链接时经常会发生碰撞，刚开始单纯地以为是生成算法有问题，毕竟就算是4位的短链接也有62^4个链接可能（26个字母的大小写+10个数字），如果生成算法没问题的话发生碰撞的概率应该是较小的。  </p>
<p>检查了一遍代码，生成算法也确实有一些问题，但都不是主要问题。今天随手在mysql里select了一下，发现查询的时候居然不区分大小写！那么其实4位的短链接就只有36^4个链接可能（160多万而已）！  </p>
<p>查阅了mysql相关文档，大致了解了mysql字符集及校对规则的选取方式：  </p>
<ol>
<li>如果指定了字符集和校对规则，那么采用指定的字符集和校对规则。  </li>
<li>如果指定了字符集但没有指定校对规则，那么采用指定的字符集和该字符集的默认校对规则。  </li>
<li>否则，采用服务器字符集和服务器校对规则。  </li>
</ol>
<p>可以通过show collation命令查询支持的校对规则及字符集默认的校对规则。<br>mysql数据库也差不多支撑不住目前的需求了，反正要迁移到分布式数据库了就暂时不理这个问题了。但越来越觉得是应该好好完整地将mysql手册看一遍了。</p>
]]></content>
    
    
      <category term="mysql" scheme="http://viminfo.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[邮件信头中Return-Path、Reply-To和From的区别]]></title>
    <link href="http://viminfo.com/2010/08/01/return-path_reply-to_from/"/>
    <id>http://viminfo.com/2010/08/01/return-path_reply-to_from/</id>
    <published>2010-07-31T18:14:27.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>懒得自己写，直接引用一段别人的回复（<a href="http://stackoverflow.com/questions/1235534/what-is-the-behavior-difference-between-return-path-reply-to-and-from" target="_blank">原贴传送门</a>），大致跟自己之前的实践及查看的文档相符。  </p>
<pre>
1)The Return-Path (sometimes called the Reverse-Path or Envelope-FROM -- all of these terms can be used interchangeably) is the value used during the SMTP session. As you can see, this does not need to be the same value that is actually found in the mail headers. Only the recipient's mail server is supposed to add a Return-Path header to the top of the email. This records the actual Return-Path sender during the SMTP session. If a Return-Path header is already exists in the email, then that header is to be removed, and replaced by the recipient's mail server.

All bounces that occur during the SMTP session should go back to the Return-Path value. Some servers may accept all email, and then queue it locally, until it has a free thread to deliver it to the recipient's mailbox. If the recipient doesn't exist, it should bounce it back to the recorded Return-Path value.

Note, not all mail servers obey this rule. Some mail servers will bounce it back to the FROM address.

2)The FROM address is the value actually found in the FROM header. This is supposed to be who the message is FROM. This is what you see as the "FROM" in most mail clients. If an email does not have a Reply-To header, then all human (mail client) replies should go back to the FROM address.

3)The Reply-To header is added by the sender (or the sender's software). It is where all human replies should be addressed too. Basically, when the user clicks "reply", the Reply-To value should be the value used as the recpient of the newly composed email. The Reply-To value should not be used by any server. It is meant for client side use.

However, as you can tell, not all mail servers obey the RFC standards or recommendations.
</pre>
]]></content>
    
    
      <category term="from" scheme="http://viminfo.com/tags/from/"/>
    
      <category term="reply-to" scheme="http://viminfo.com/tags/reply-to/"/>
    
      <category term="return-path" scheme="http://viminfo.com/tags/return-path/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据库表的轮转（续）]]></title>
    <link href="http://viminfo.com/2010/08/01/database_table_rotate_2/"/>
    <id>http://viminfo.com/2010/08/01/database_table_rotate_2/</id>
    <published>2010-07-31T17:53:55.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>上次提到了数据库表的轮转，大致阐述了问题及初步的解决方法。然而实现的时候还是会遇到些问题。  </p>
<p>轮转的时候，需要将旧表A中未完成的任务都迁移到新建的表B中（当然也可以不迁移，而是直接将旧表中的任务处理完为止，但这种方式更为复杂曲折，不予考虑）。迁移的时候有可能会往A中继续插入新的任务，迁移可能会遗漏一些记录；或者从A中取出任务执行完后需要更新任务状态时却发现A中该记录已被迁移到B中了，造成任务状态的不确定性；又或者在A中存在某用户U的开通记录但处理时失败了需要继续重试，但迁移过程中继续插入了一条取消记录，那么就有可能取消成功了但是又由于之前有个失败的开通记录，重试后就导致又被开通了。可能存在的问题还有许多，比如有可能新建表或迁移的时候数据库处理失败了。有没办法将创建新表、迁移记录处理成一个原子操作呢？  </p>
<p>首先想到的是通过加锁。具体步骤如下：  </p>
<ol>
<li>创建新表B  </li>
<li>对旧表A和新表B及轮转记录表C都加写锁（lock tables a write, b write, c write;）  </li>
<li>关闭自动提交（set autocommit=0）  </li>
<li>更新轮转记录C  </li>
<li>将旧表A中需要迁移的记录都select出来，然后批量插入到B中  </li>
<li>将sql语句中记录的tableName变量更改成新表B的表名  </li>
<li>更新轮转记录C，标记本次迁移完成</li>
<li>释放表锁（unlock tables）及其他一些后续处理  </li>
</ol>
<p>但由于对数据库锁天然的畏惧，最终并没有使用该方式，而是通过自己程序内部控制以模拟达到锁的效果。具体步骤如下：  </p>
<ol>
<li>创建新表B  </li>
<li>设置onCopy=true（onCopy=true时，其他希望更新任务记录的数据库操作都会阻塞在copyLock.wait()上）<br>3~7与上述方式一致  </li>
<li>设置onCopy=false，并调用copyLock.notifyAll()以唤醒所有阻塞的数据库操作  </li>
</ol>
<p>这次重构，由于对mysql的了解还不够深入，花费了许多时间，期间详细查看了<a href="http://dev.mysql.com/doc/refman/5.1/en/sql-syntax-transactions.html" target="_blank">mysql官方文档</a>关于事务及锁的描述，获益匪浅</p>
]]></content>
    
    
      <category term="mysql" scheme="http://viminfo.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据库表的轮转]]></title>
    <link href="http://viminfo.com/2010/07/24/database_table_rotate_1/"/>
    <id>http://viminfo.com/2010/07/24/database_table_rotate_1/</id>
    <published>2010-07-23T18:47:00.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>负责的一个项目，在开通时会赠送一批服务（粗略算了下大概有10来个），而开通这些服务有些可能比较耗时，就将这些服务都以后台任务的形式处理了。  </p>
<p>最开始开通量少的时候，这些任务都是在一张表里以不同任务名记录的，处理完就修改下任务状态。后来随着开通量的增加，集中在一张表里已经开始会影响性能了，那么很自然地就想到分表，将不同的任务划分到不同的表里，数据量就少了一个数量级。  </p>
<p>但是开通量增长得比较快，就算分表发现性能也并不能好多少。最开始想偷懒就打算隔一段时间清理一下已经处理完的任务（反正这些任务处理完后基本都不需要再保留的了），但是mysql如果不optimize表的话，删除的空间是不会被回收利用的，索引也是，所以就得经常停机optimize表。  </p>
<p>经常这么折腾，谁都受不了，而且服务也得停会影响线上用户的正常使用也不好。最近就将这些任务表都做成按天轮转，每天轮换一个表，这样每个表的数据就基本在10多万行里，而且空间不够的时候可以直接drop掉一些过期的表（写个脚本定期drop）也不会影响线上服务，维护工作量明显少了很多。</p>
]]></content>
    
    
      <category term="mysql" scheme="http://viminfo.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[转换文件名编码]]></title>
    <link href="http://viminfo.com/2010/07/16/convert_filename_encoding/"/>
    <id>http://viminfo.com/2010/07/16/convert_filename_encoding/</id>
    <published>2010-07-16T14:46:40.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>合作方给了一批含有大量中文文件名的文件过来，需要对这批文件批量处理后再将结果反馈回去。这批文件的文件名是GBK编码的，但是我本地的环境是zh_CN.UTF-8的，在我的机器上这些文件名就乱码了。当然，可以先通过LANG=zh_CN.GBK将本地环境临时改成GBK来处理，但是能不能一次性将这些文件名批量转成UTF-8呢？  </p>
<p>很显然，是可以的。iconv能将文件内容从一种字符集编码转换成另一种，类似的，convmv能将文件名从一种编码转换成另一种。</p>
<p><pre><br>conmv - converts filenames from one encoding to another.<br></pre><br>这个命令相当强大，可以递归目录，可以指定其他命令替代rename操作，可以指定低内存使用量，可以unescape，可以转换大小写等。实乃居家旅行，杀人灭口必备良品啊！</p>
]]></content>
    
    
      <category term="iconv" scheme="http://viminfo.com/tags/iconv/"/>
    
      <category term="convmv" scheme="http://viminfo.com/tags/convmv/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转]字符集和编码的经典]]></title>
    <link href="http://viminfo.com/2010/04/18/character_encoding_classic/"/>
    <id>http://viminfo.com/2010/04/18/character_encoding_classic/</id>
    <published>2010-04-18T08:20:53.000Z</published>
    <updated>2014-05-15T09:22:05.000Z</updated>
    <content type="html"><![CDATA[<p>【转】出处不详</p>
<pre>
很久很久以前，有一群人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们看到8个开关状态是好的，于是他们把这称为"字节"。

再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出很多状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为"计算机"。

开始计算机只在美国用八位的字节一共可以组合出256(2的8次方)种不同的状态。

他们把其中的编号从0开始的32种状态分别规定了特殊的用途，一但终端、打印机遇上约定好的这些字节被传过来时，就 要做一些约定的动作。遇上00x10,终端就换行，遇上0x07,终端就向人们嘟嘟叫，例好遇上0x1b,打印机就打印反白的字，或者终端就用彩色显示字母。他们看到这样很好，于是就把这些0x20以下的字节状态称为"控制码"。

他们又把所有的空格、标点符号、数字、大小写字母 分别用连续的字节状态表示，一直编到了第127号，这样计算机就可以用不同字节来存储英语的文字了。大家看到这样，都感觉很好，于是大家都把这个方案叫做ANSI的"Ascii"编码（American Standard Code for Information Interchange，美国信息互换标准代码）。当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。 

后来，就像建造巴比伦塔一样，世界各地的都开始使用计算机，但是很多国家用的不是英文，他们的字母里有许多是ASCII里没有的，为了可以在计算机保存他们的文字，他们决定采用127号之后的空位来表示这些新的字母、符号，还加入了很多画表格时需要用下到的横线、竖线、交叉等形状，一直把序号编到了最后一个状态255。从128到255这一页的字符集被称"扩展字符集"。从此之后，贪婪的人类再没有新的状态可以用了，美帝国主义可能没有想到还有第三世界国家的人们也希望可以用到计算机吧！  

等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气地把那些127号之后的奇异符号们直接取消掉, 规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的"全角"字符，而原来在127号以下的那些就叫"半角"字符了。  

中国人民看到这样很不错，于是就把这种汉字方案叫做 "GB2312"。GB2312是对ASCII的中文扩展。 

但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人。于是我们不得不继续把GB2312没有用到的码位找出来老实不客气地用上。 

后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符 集里的内容。结果扩展之后的编码方案被称为GBK标准，GBK包括了GB2312的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。  

后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了GB18030。从此之后，中华民族的文化就可以在计算机时代中传承了。 

中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做"DBCS"（Double Byte Charecter Set 双字节字符集）。在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。那时候凡是受过加持，会编程的计算机僧侣们都要每天念下面这个咒语数百遍：  

"一个汉字算两个英文字符！一个汉字算两个英文字符......" 

因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码，连大陆和台湾这样只相隔了150海里，使用着同一种语言的兄弟地区，也分别采用了不同的 DBCS 编码方案。当时的中国人想让电脑显示 汉字，就必须装上一个"汉字系统"，专门用来处理汉字的显示、输入的问题，但是那个台湾的愚昧封建人士写的算命程序就必须加装另一套支持BIG5编码的什么"倚天汉字系统"才可以用，装错了字符系统，显示就会乱了套！这怎么办？而且世界民族之林中还有那些一时用不上电脑的穷苦人民，他们的文字又怎么办？ 

真是计算机的巴比伦塔命题啊！ 

正在这时，大天使加百列及时出现了：一个叫ISO（国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号的编码！他们打算叫它"Universal Multiple-Octet Coded Character Set"，简称 UCS, 俗称 "UNICODE"。 

UNICODE开始制订时，计算机的存储器容量极大地发展了，空间再也不成为问题了。于是ISO就直接规定必须用两个字节，也就是16位来统一表示所有的字符，对于ascii里的那些"半角"字符，UNICODE包持其原编码不变，只是将其长度由原来的8位扩展为16位，而其他文化和语言的字符则全部重新统一编 码。由于"半角"英文符号只需要用到低8位，所以其高8位永远是0，因此这种大气的方案在保存英文文本时会多浪费一倍的空间。  

这时候，从旧社会里走过来的程序员开始发现一个奇怪的现象：他们的strlen函数靠不住了，一个汉字不再是相当于两个字符了，而是一个！是的， 从UNICODE 开始，无论是半角的英文字母，还是全角的汉字，它们都是统一的"一个字符"！同时，也都是统一的"两个字节"，请注意"字符"和"字节"两个术语的不同，"字节"是一个8位的物理存贮单元，而"字符"则是一个文化相关的符号。在UNICODE中，一个字符就是两个字节。一个汉字算两个英文字符的时代已经快过去了。 

从前多种字符集存在时，那些做多语言软件的公司遇上过很大麻烦，他们为了在不同的国家销售同一套软件，就不得不在区域化软件时也加持那个双字节字符集咒语，不仅要处处小心不要搞错，还要把软件中的文字在不同的字符集中转来转去。UNICODE 对于他们来说是一个很好的一揽子解决方案，于是从Windows NT开始，MS趁机把它们的操作系统改了一遍，把所有的核心代码都改成了用UNICODE方式工作的版本，从这时开始，WINDOWS系统终于无需要加装各种本土语言系统，就可以显示全世界上所有文化的字符了。  

但是，UNICODE在制订时没有考虑与任何一种现有的编码方案保持兼容，这使得GBK与UNICODE在汉字的内码编排上完全是不一样的，没有一种简单的算术方法可以把文本内容从UNICODE编码和另一种编码进行转换，这种转换必须通过查表来进行。 

如前所述，UNICODE是用两个字节来表示为一个字符，他总共可以组合出65535不同的字符，这大概已经可以覆盖世界上所有文化的符号。如果还不够也没有关系，ISO已经准备了UCS-4方案，说简单了就是四个字节来表示一个字符，这样我们就可以组合出21亿个不同的字符出来（最高位有其他用途），这大概可以用到银河联邦成立那一天吧！  

UNICODE来到时，一起到来的还有计算机网络的兴起，UNICODE如何在网络上传输也是一个必须考虑的问题，于是面向传输的众多UTF（UCS Transfer Format）标准出现了，顾名思义，UTF8就是每次8个位传输数据，而UTF16就是每次16个位，只不过为了传输时的可靠性，从UNICODE到UTF时并不是直接的对应，而是要过一些算法和规则来转换。 

受到过网络编程加持的计算机僧侣们都知道，在网络里传递信息时有一个很重要的问题，就是对于数据高低位的解读方式，一些计算机是采用低位先发送的方法，例如我们PC机采用的INTEL架构，而另一些是采用高位先发送的方式，在网络中交换数据时，为了核对双方对于高低位的认识是否是一致的，采用了一种很简便的方法，就是在文本流的开始时向对方发送一个标志符。如果之后的文本是高位在位，那就发送"FEFF"，反之，则发送"FFFE"。不信你可以用二进制 方式打开一个UTF-X格式的文件，看看开头两个字节是不是这两个字节？  

讲到这里，我们再顺便说说一个很著名的奇怪 现象：当你在 windows 的记事本里新建一个文件，输入"联通"两个字之后，保存，关闭，然后再次打开，你会发现这两个字已经消失了，代之的是几个 乱码！呵呵，有人说这就是联通之所以拼不过移动的原因。 

其实这是因为GB2312编码与UTF8编码产生了编码冲撞的原因。 

从网上引来一段从UNICODE到UTF8的转换规则： 

Unicode 

UTF-8  
0000 - 007F

0xxxxxxx 

0080 - 07FF 

110xxxxx 10xxxxxx 

0800 - FFFF 

1110xxxx 10xxxxxx 10xxxxxx 

例如"汉"字的Unicode编码是 6C49。6C49在0800-FFFF之间，所以要用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制 是：0110 1100 0100 1001，将这个比特流按三字节模板的分段方法分为0110 110001 001001，依次代替模板中的x，得 到：1110-0110 10-110001 10-001001，即E6 B1 89，这就是其UTF8的编码。  

而当你新建一个文本文件时，记事本的编码默认是ANSI, 如果你在ANSI的编码输入汉字，那么他实际就是GB系列的编码方式，在这种编码下，"联通"的内码是： 

c1 1100 0001 

aa 1010 1010 

cd 1100 1101 

a8 1010 1000 

注意到了吗？第一二个字节、第三四个字节的起始部分的都是"110"和"10"，正好与UTF8规则里的两字节模板是一致的，于是再次打开记事本时，记事本 就误认为这是一个UTF8编码的文件，让我们把第一个字节的110和第二个字节的10去掉，我们就得到了"00001 101010"，再把各位对齐，补上前导的0，就得到了"0000 0000 0110 1010"，不好意思，这是UNICODE的006A，也就是小写的字母"j"，而之后的两字节用UTF8解码之后是0368，这个字符什么也不是。这就是只有"联通"两个字的文件没有办法在记事本里正常显示的原因。  

而如果你在" 联通"之后多输入几个字，其他的字的编码不见得又恰好是110和10开始的字节，这样再次打开时，记事本就不会坚持这是一个utf8编码的文件，而会用ANSI的方式解读之，这时乱码又不出现了。
</pre>
]]></content>
    
    
      <category term="charset" scheme="http://viminfo.com/tags/charset/"/>
    
      <category term="encoding" scheme="http://viminfo.com/tags/encoding/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nohup]]></title>
    <link href="http://viminfo.com/2010/02/10/nohup/"/>
    <id>http://viminfo.com/2010/02/10/nohup/</id>
    <published>2010-02-09T18:50:59.000Z</published>
    <updated>2014-05-15T09:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>Linux的常识知道得太少了，需要不断累积一下。  </p>
<p>最近有一些批量任务需要花费较多的时间来运行，但总不可能开着终端一种挂着吧？之前知道在命令后面再加个 <code>&amp;</code> 就可以让任务在后台执行，本以为这样就OK万事大吉了，谁知道关掉终端后重新打开，发现任务居然中止了！  </p>
<p>OMG，原来通过 <code>&amp;</code> 并不能解决问题！断开终端后，通过 <code>&amp;</code> 在后台运行的进程也会跟着中止，这时候就需要使用nohup(no hang up)这个命令了，通过nohup命令，可以让任务一直在后台运行，就算断开终端，任务仍然会继续执行。  </p>
<p>又长见识了，哎，继续找出没有做完的任务重新跑吧，悲剧啊！</p>
]]></content>
    
    
      <category term="linux" scheme="http://viminfo.com/tags/linux/"/>
    
      <category term="nohup" scheme="http://viminfo.com/tags/nohup/"/>
    
  </entry>
  
</feed>
